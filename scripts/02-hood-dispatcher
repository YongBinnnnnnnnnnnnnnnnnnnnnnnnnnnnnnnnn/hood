#!/bin/bash

logfile=/var/log/hood-dispatcher.log
echo $1 $2 $3 start | tee -a $logfile >  /dev/tty1
user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36"

if [ "$1" = "lo" ]; then
  exit 0
fi

function proxy_access_on(){
  nft insert rule ip filter input index 5 iif $1 ip daddr 10.0.2.1 tcp dport {11371} accept
  nft insert rule ip filter input index 5 iif $1 udp dport {68} udp sport {67} log prefix \"[HOOD A]\" flags all accept
  nft insert rule ip filter output index 5 oif $1 udp sport {67} udp dport {68} log prefix \"[HOOD A]\" flags all accept
}

function internet_access_on(){
  echo "internet access on " $1 | tee -a $logfile >  /dev/tty1
  if ! sudo nft list ruleset netdev | grep -q "\b${1}\b"; then
    nft add chain netdev filter ${1}ingress { type filter hook ingress device $1 priority filter\; policy drop\;}
    nft add chain netdev filter ${1}egress { type filter hook egress device $1 priority filter\; policy drop\;}
    #nft add rule netdev filter ${1}ingress meta protocol ip6 drop
    #nft add rule netdev filter ${1}ingress meta protocol 8021q drop
    #nft add rule netdev filter ${1}ingress meta protocol 8021ad drop
    #nft add rule netdev filter ${1}ingress meta protocol vlan drop
    nft add rule netdev filter ${1}ingress meta protocol arp accept
    nft add rule netdev filter ${1}ingress meta protocol ip accept
    nft add rule netdev filter ${1}egress meta protocol arp accept
    nft add rule netdev filter ${1}egress meta protocol ip accept
  fi
  nft insert rule ip filter output index 5 oif $1 tcp dport {53, 80, 443} accept
  nft insert rule ip filter output index 5 oif $1 udp dport {53} log prefix \"[HOOD A]\" flags all accept
  nft insert rule ip filter input index 5 iif $1 udp dport {67} udp sport {68} log prefix \"[HOOD A]\" flags all accept
  nft insert rule ip filter output index 5 oif $1 udp sport {68} udp dport {67} log prefix \"[HOOD A]\" flags all accept
  nft insert rule arp filter input index 0 iif $1 log prefix \"[HOOD A]\" flags all accept
  nft insert rule arp filter output index 0 oif $1 log prefix \"[HOOD A]\" flags all accept
}

function revoke_dhcp_client_access_on(){
  echo "revoke dhcp access on " $1 | tee -a $logfile >  /dev/tty1
  #sudo nft delete chain netdev filter eth0ingress
  nft delete rule ip filter input iif $1 udp dport {67} udp sport {68} accept notrack
  nft delete rule ip filter output iif $1 udp sport {68} udp dport {67} accept notrack
  nft delete rule arp filter input iif $1 log prefix \"[HOOD A]\" flags all accept notrack
  nft delete rule arp filter output oif $1 log prefix \"[HOOD A]\" flags all accept notrack
}

function revoke_internet_access_on(){
  echo "revoke internet access on " $1 | tee -a $logfile >  /dev/tty1
  nft delete rule ip filter output oif $1 tcp dport {53, 80, 443} accept
  nft delete rule ip filter output oif $1 udp dport {53} accept
  nft delete rule ip filter input iif $1 udp dport {67} udp sport {68} accept
  nft delete rule ip filter output iif $1 udp sport {68} udp dport {67} accept
  nft delete rule arp filter input iif $1 log prefix \"[HOOD A]\" flags all accept notrack
  nft delete rule arp filter output oif $1 log prefix \"[HOOD A]\" flags all accept notrack
}

#dhcp server 67 client 68
function initial_firewall_rules(){
  sysctl net.netfilter.nf_conntrack_udp_timeout=10
  sysctl net.netfilter.nf_conntrack_udp_timeout_stream=10
  nohup dmesg --color=never -w -e |grep "\[HOOD " | tee -a /var/log/hood-firewal.log &
  disown
  nohup dmesg --color=never -w -e |grep "\[HOOD " | sed -r "s/.*IN=(\w+?) OUT=(\w+?) SRC=([^ ]+) DST=([^ ]+) .* PROTO=(\w+) SPT=(\w+) DPT=(\w+) (.*)/\2->\1 \5 \3:\6 -> \4:\7/g" |xargs -I {} date +"%Y-%m-%d %H:%M:%S "{} | tee -a /var/log/hood-firewal-readable.log > /dev/tty1 &
  disown
}

function alter_shared_forward_rules() {
  true
}

function wait_internet_access(){
  url="http://1.1.1.1/"
  if [ $1 ]; then
    url=$1
  fi
  while ! curl --compressed $url -H "User-Agent: ${user_agent}" 2>&1 > /dev/tty1; do
    echo "Waiting for network connection" |tee -a $logfile > /dev/tty1
    sleep 1
  done
}

function wait_dhcp_success(){
  while ! ip address show $1 |grep inet | grep -v "inet -127" 2>&1 > /dev/tty1; do
    echo "Waiting for dhcp result on $1"  |tee -a $logfile > /dev/tty1
    sleep 1
  done
}

function http_timesync(){
  wait_internet_access
  curl --max-time 10 --silent --compressed http://1.1.1.1/ -H "User-Agent: ${user_agent}" --dump-header - |grep "^[Dd]ate"|sed "s/[Dd]ate: //"|xargs -I {} date -s {}
}

if [ "$2" = "before-network-service" ]; then
  initial_firewall_rules
elif [ "$2" = "pre-up" ]; then
  ifconfig $1 link random
  case $1 in 
    usb*) if realpath /sys/class/net/$1/../../driver|grep rndis_host ; then internet_access_on $1 $2; else /usr/sbin/dnsmasq --conf-file=/dev/null --no-hosts --keep-in-foreground --interface=$1 --clear-on-reload --strict-order --listen-address=10.0.2.1 --dhcp-range=10.0.2.1,10.0.2.2,24h --dhcp-lease-max=1 --dhcp-leasefile=/var/tmp/dnsmasq.leases --conf-dir=/etc/NetworkManager/dnsmasq-shared.d & fi;;
    *) internet_access_on $1 $2;;
  esac
  #nmcli device modify eth0 ipv4.method disabled ipv6.method disabled

elif [ "$2" = "timesync" ]; then
  http_timesync
elif [ "$2" = "up" ]; then
  if [ "$3" = "" ]; then
    nohup $0 $1 $2 stage1 &
    disown
  elif [ "$3" = "stage1" ]; then
    wan_port=0
    case $1 in 
      usb*) if realpath /sys/class/net/$1/../../driver|grep rndis_host ; then wan_port=1; fi;;
      *) wan_port=1;;
    esac
    if 
    if [ $wan_port -eq 1 ]; then
      wait_dhcp_success $1
      revoke_dhcp_client_access_on $1 $2
      http_timesync
      if test -f /var/hood_harden_only; then
        exit
      fi
      echo "Config dante to use" $1 |tee -a $logfile > /dev/tty1
      sed -i "s|external: eth0|external: "$1"|g" /etc/danted.conf
      sed -i "s|external: wlan0|external: "$1"|g" /etc/danted.conf
      echo "Up usb0" |tee -a $logfile > /dev/tty1
      #if nmcli connection show --active|grep usb0; then
      if ip address show usb0|grep inet; then
        $0 "usb0" "up"
      elif ip address show usb1|grep inet; then
        $0 "usb1" "up"
      else
        #ip link set usb0 down
        #ip link set usb0 address 99:88:77:66:55:43
        nmcli connection up usb0
      fi
      
      if test -f /do_upgrade; then
        wait_internet_access
        apt-get update |tee -a $logfile > /dev/tty1
        apt-get full-upgrade -y|tee -a $logfile > /dev/tty1
        rm /do_upgrade
        reboot
      fi
      if test -f /run_once; then
        wait_internet_access
        echo "run once" |tee -a $logfile > /dev/tty1
        rm /tmp/run_once
        mv /run_once /tmp/
        /tmp/run_once |tee -a $logfile > /dev/tty1
        reboot
      fi
    fi
  fi
elif [ "$2" = "down" ]; then
  revoke_internet_access_on $1 $2
fi

if [ "$2" = "connectivity-change" ]; then
  exit 0;
fi

echo $1 $2 $3 end |tee -a $logfile > /dev/tty1

exit 0
