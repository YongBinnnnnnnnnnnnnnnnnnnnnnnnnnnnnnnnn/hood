#!/bin/bash

log_device=/dev/tty1
if test -f /var/lib/hood/flags/harden_only; then
  log_device=/dev/tty8
fi

logfile=/var/log/hood-dispatcher.log
echo $1 $2 $3 start | tee -a $logfile > $log_device
user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36"

mkdir -p /tmp/hood

function add_default_netdev_filter_on(){
  if ! sudo nft list ruleset netdev | grep -q "\b${1}\b"; then
    nft add chain netdev filter ${1}ingress { type filter hook ingress device $1 priority filter\; policy drop\;}
    nft add chain netdev filter ${1}egress { type filter hook egress device $1 priority filter\; policy drop\;}
    #nft add rule netdev filter ${1}ingress meta protocol ip6 drop
    #nft add rule netdev filter ${1}ingress meta protocol 8021q drop
    #nft add rule netdev filter ${1}ingress meta protocol 8021ad drop
    #nft add rule netdev filter ${1}ingress meta protocol vlan drop
    nft add rule netdev filter ${1}ingress meta protocol arp accept
    nft add rule netdev filter ${1}ingress meta protocol ip accept
    nft add rule netdev filter ${1}egress meta protocol arp accept
    nft add rule netdev filter ${1}egress meta protocol ip accept
  fi
}

function nft_handle_to_file(){
  nft -a -e "${@:2}"|head -n 1|sed "s/.*# handle //">>$1
}

function load_proxy_ports(){
  tls_ports=$(grep -v -e '^[[:space:]]*$' -e '^#' </var/lib/hood/allowed_tls_ports.txt|tr "\n" ",")
  expose_ports=$(grep -v -e '^[[:space:]]*$' -e '^#' </var/lib/hood/expose_to_internal.txt|sed "s/ .*//"|tr "\n" ",")
  echo "80,${tls_ports},${expose_ports}"
}

function proxy_access_on(){
  echo "give proxy access on " $1 | tee -a $logfile > $log_device
  touch /tmp/hood/counter.lock
  exec {counter_lock_fd}<>/tmp/hood/counter.lock
  flock $counter_lock_fd
  if ! test -f /tmp/hood/counter; then
    python -c "import secrets; print(2+secrets.randbelow(256-2))" > /tmp/hood/counter
  fi
  counter=$((2 + ($(cat /tmp/hood/counter) - 1) % 254))
  echo "$counter" > /tmp/hood/counter
  flock -u $counter_lock_fd
  interface_address="10.0.${counter}.1"

  ip link set $1 down
  ip link set $1 up
  ip address flush $1
  ip address add $interface_address/24 dev $1
  echo $interface_address > /tmp/hood/$1-address

  proxy_ports=$(load_proxy_ports)
  nft_handle_to_file /tmp/hood/$1_proxy_i_rule insert rule ip filter input index 5 iif $1 ip daddr ${interface_address}/32 tcp dport {${proxy_ports}} accept
  nft_handle_to_file /tmp/hood/$1_proxy_i_rule insert rule ip filter input index 5 iif $1 ip daddr ${interface_address}/32 udp dport 53 accept
  nft_handle_to_file /tmp/hood/$1_proxy_i_rule insert rule ip filter input index 5 iif $1 udp sport {68} udp dport {67} log prefix \"[HOOD A]\" flags all accept
  nft_handle_to_file /tmp/hood/$1_proxy_o_rule insert rule ip filter output index 5 oif $1 udp sport {67} udp dport {68} log prefix \"[HOOD A]\" flags all accept
  nohup /usr/sbin/dnsmasq --pid-file=/tmp/hood/dnsmasq-$1.pid --conf-file=/dev/null --no-hosts --no-resolv --keep-in-foreground --interface=$1 --except-interface=lo --clear-on-reload --strict-order --listen-address=$interface_address --bind-interfaces --no-poll --address=/#/$interface_address --cache-size=0  --dhcp-range=$interface_address,10.0.${counter}.255,255.255.255.0,400w --dhcp-authoritative --dhcp-leasefile=/tmp/hood/dnsmasq-$1.lease --dhcp-option=option:dns-server,$interface_address --log-queries > /tmp/hood/dnsmasq-$1.log 2>&1  &
  disown
}


function revoke_proxy_access_on(){
  echo "revoke proxy access on " $1 | tee -a $logfile > $log_device
  interface_address=$(cat /tmp/hood/$1-address)
  while read handle; do
    nft delete rule ip filter input handle $handle
  done < /tmp/hood/$1_proxy_i_rule
  rm /tmp/hood/$1_proxy_i_rule
  while read handle; do
    nft delete rule ip filter output handle $handle
  done < /tmp/hood/$1_proxy_o_rule
  rm /tmp/hood/$1_proxy_o_rule
  kill $(cat /tmp/hood/dnsmasq-$1.pid)
}

function add_arp_access_on(){
  nft_handle_to_file /tmp/hood/$1_arp_i_rule add rule arp filter input iif $1 log prefix \"[HOOD A]\" flags all accept
  nft_handle_to_file /tmp/hood/$1_arp_o_rule add rule arp filter output oif $1 log prefix \"[HOOD A]\" flags all accept
}
function revoke_arp_access_on(){
  while read handle; do
    nft delete rule arp filter input handle $handle
  done < /tmp/hood/$1_arp_i_rule
  rm /tmp/hood/$1_arp_i_rule
  while read handle; do
    nft delete rule arp filter output handle $handle
  done < /tmp/hood/$1_arp_o_rule
  rm /tmp/hood/$1_arp_o_rule
}
function add_dhcp_client_access_on(){
  echo "add dhcp access on " $1 | tee -a $logfile > $log_device
  # This log has never printed on my device
  # Today I found that someone was swapping the SD card of my Pi while I was going to toilet
  # So, it could be someone installed something strange in kernel of my Pi and did something to this rule.
  # Not sure 
  nft_handle_to_file /tmp/hood/$1_dhcp_ip_i_rule insert rule ip filter input index 5 iif $1 udp dport {67} udp sport {68} log prefix \"[HOOD A]\" flags all accept
  nft_handle_to_file /tmp/hood/$1_dhcp_ip_o_rule insert rule ip filter output index 5 oif $1 udp sport {68} udp dport {67} log prefix \"[HOOD A]\" flags all accept
}

function revoke_dhcp_client_access_on(){
  echo "revoke dhcp access on " $1 | tee -a $logfile > $log_device
  #sudo nft delete chain netdev filter eth0ingress
  while read handle; do
    nft delete rule ip filter input handle $handle
  done < /tmp/hood/$1_dhcp_ip_i_rule
  rm /tmp/hood/$1_dhcp_ip_i_rule
  while read handle; do
    nft delete rule ip filter output handle $handle
  done < /tmp/hood/$1_dhcp_ip_o_rule
  rm /tmp/hood/$1_dhcp_ip_o_rule
}

function internet_access_on(){
  echo "internet access on " $1 | tee -a $logfile > $log_device
  ip addr show eth0|grep inet -m 1|sed -r "s/    inet ([0-9\.]*).*/\1/">/tmp/hood/wan_ip
  wan_ip=$(cat /tmp/hood/wan_ip)
  
  proxy_ports=$(load_proxy_ports)
  nft_handle_to_file /tmp/hood/$1_internet_o_rule insert rule ip filter output index 5 oif $1 ip saddr $wan_ip/32 tcp dport {load_proxy_ports} accept
}

function revoke_internet_access_on(){
  echo "revoke internet access on " $1 | tee -a $logfile > $log_device

  while read handle; do
    nft delete rule ip filter output handle $handle
  done < /tmp/hood/$1_internet_o_rule
  rm /tmp/hood/$1_internet_o_rule
}

#dhcp server 67 client 68
function initial_firewall_rules(){
  sysctl net.netfilter.nf_conntrack_udp_timeout=10
  sysctl net.netfilter.nf_conntrack_udp_timeout_stream=10
  nohup dmesg --color=never -w -e |grep "\[HOOD " | tee -a /var/log/hood-firewal.log &
  disown
  nohup dmesg --color=never -w -e |grep "\[HOOD " | sed -r "s/.*IN=(\w+?) OUT=(\w+?) SRC=([^ ]+) DST=([^ ]+) .* PROTO=(\w+) SPT=(\w+) DPT=(\w+) (.*)/\2->\1 \5 \3:\6 -> \4:\7/g" |xargs -I {} date +"%Y-%m-%d %H:%M:%S "{} | tee -a /var/log/hood-firewal-readable.log > $log_device &
  disown
  
  early_interfaces=($(ls -b /sys/class/net/))

  for i in "${early_interfaces[@]}"
  do
    add_default_netdev_filter_on $i
  done
}

function is_wan_port() {
  if test -d /sys/class/net/$1; then
    if realpath /sys/class/net/$1 | grep -q "$(cat /var/lib/hood/wan_port_device_path.txt)"; then
      touch /tmp/hood/$1-is-wan-port
      return 0
    fi
  else
    if test -f /tmp/hood/$1-is-wan-port; then
      return 0
    fi
  fi
  return 1
}

function wait_internet_access(){
  url="http://1.1.1.1/"
  if [ $1 ]; then
    url=$1
  fi
  while ! curl --max-time 10 --compressed $url -H "User-Agent: ${user_agent}" 2>&1 > $log_device; do
    echo "Waiting for network connection" |tee -a $logfile > $log_device
    sleep 1
  done
}

function wait_dhcp_success(){
  while ! ip address show $1 |grep inet | grep -v "inet 127" 2>&1 > $log_device; do
    echo "Waiting for dhcp result on $1"  |tee -a $logfile > $log_device
    sleep 1
  done
  return 0
  while ! ip route|head -n 1 |grep -q default; do
    echo "Waiting for dhcp result on $1"  |tee -a $logfile > $log_device
    sleep 1
  done
  gateway=$(ip route|head -n 1|sed -r "s/default via ([0-9\.]*).*/\1/")
  while ! ip neigh|grep $gateway|grep -q lladdr; do
    echo "Waiting for dhcp result on $1"  |tee -a $logfile > $log_device
    sleep 1
  done
}

function http_timesync(){
  wait_internet_access
  /usr/local/bin/hood-timesync.py
}

if [ "$2" = "before-network-service" ]; then
  initial_firewall_rules
  mkdir -p /tmp/hood
elif [ "$2" = "udev-add" ]; then
  add_default_netdev_filter_on $1
elif [ "$2" = "pre-up" ]; then
  #ifconfig $1 link random
  if is_wan_port $1; then
    add_dhcp_client_access_on $1 $2
    add_arp_access_on $1 $2
  else
    proxy_access_on $1 $2
    add_arp_access_on $1 $2
  fi
elif [ "$2" = "timesync" ]; then
  http_timesync
elif [ "$2" = "up" ]; then
  if is_wan_port $1; then
    wait_dhcp_success $1
    revoke_dhcp_client_access_on $1 $2
    internet_access_on $1 $2
    http_timesync
    systemctl restart hood-network-services.service

    if test -f /var/lib/hood/flags/usb_tether; then
      if ! ls /sys/class/udc/*/device/*/net > /dev/null; then
        /usr/local/lib/hood/enable-usb-gadget.sh ethernet
      fi
      ls /sys/class/udc/*/device/*/net|xargs -I {} /etc/NetworkManager/dispatcher.d/02-hood-dispatcher {} pre-up
    fi

    if test -f /var/lib/hood/flags/harden_only; then
      exit
    fi
    
    if test -f /do_upgrade; then
      wait_internet_access
      apt-get update |tee -a $logfile > $log_device
      apt-get full-upgrade -y|tee -a $logfile > $log_device
      rm /do_upgrade
      reboot
    fi
    if test -f /run_once; then
      wait_internet_access
      echo "run once" |tee -a $logfile > $log_device
      rm /tmp/run_once
      mv /run_once /tmp/
      /tmp/run_once |tee -a $logfile > $log_device
      reboot
    fi
  fi
elif [ "$2" = "down" ]; then
  if is_wan_port $1; then
    del /tmp/hood/$1-is-wan-port
    revoke_dhcp_client_access_on $1 $2
    revoke_arp_access_on $1 $2
    revoke_internet_access_on $1 $2
  else
    revoke_proxy_access_on $1 $2
    revoke_arp_access_on $1 $2
  fi
fi

if [ "$2" = "connectivity-change" ]; then
  exit 0;
fi

echo $1 $2 $3 end |tee -a $logfile > $log_device

exit 0
